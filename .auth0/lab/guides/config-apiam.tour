{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "#4 - Configure API Access Management",
  "nextTour": "#5 - Test the Promos App after Protecting the API",
  "steps": [
    {
      "title": "Lab overview",
      "description": "## Configure API Access Management\n\n🎯 **Objective**:   Configure Okta API Access Management to protect APIs.\n\n⏱️ **Duration**:    15 minutes\n\n**Scenario**: Okta Ice asked you to protect the Promos API using OAuth and Okta API Access Management. In this lab, you create a custom Authorization Server, custom OAuth Scopes, and Policies for protecting the access to the Promos APIs.\n"
    },
    {
      "title": "Register a Custom Authorization Server",
      "description": "## Register a custom Authorization Server\n\n> An Authorization Server is a REST API service – located under https://{domain}.okta.com/oauth2/**id** – that can issue, validate, and revoke OAuth/OIDC tokens. Custom Authorization Servers are the main entry in API Accessmanagement (API AM) and from where all API AM features are managed—with exception to managing Apps—you can do that under the Applications menu.\n\n\n1.  In your VM, access your Okta Admin dashboard as **oktatraining**.\n\n2.  In the Admin menu, go to **Security** > **API**.\n\n3.  Click **Add Authorization Server**.\n\n4.  Enter the following information, then click **Save**.\n    - **Name**: Promos API AuthZ Server\n    - **Audience**: api://promos\n\n>According to [RFC 7519](https://tools.ietf.org/html/rfc7519#section-4.1.3), the **audience** claim identifies the recipients that the JSON Web Token (JWT) is intended for. Generally, the “aud” value is an array of case-sensitive strings, each containing a StringorURI value. However, if the JWT has only one audience, the “aud” value can be a single StringorURI value."
    },
    {
      "title": "Retrieve the issuer",
      "description": "## Retrieve the issuer\n1.  Once you register the Promos API Authz Server, you will be on its configuration page.\n2. From this page, select the **Metadata URL**\n3. Copy the **issuer** value to your clipboard. You will use this in the next step.\n  ![](https://raw.githubusercontent.com/OktaEdu/es-delivery-apiam/refs/heads/ondemand/media/image9.png)",
      "selection": {
        "start": {
          "line": 1,
          "character": 4
        },
        "end": {
          "line": 1,
          "character": 34
        }
      }
    },
    {
      "file": "ice-resource-server/config.js",
      "description": "## Configure the Promos API issuer\n\n*Notice that ./ice-resource-server/config.js has been opened for you.*\n\n1.  Paste the contents of your clipboard to replace the placeholder value for **issuer**.\n\n\n",
      "line": 3
    },
    {
      "file": "ice-resource-server/config.js",
      "description": "# Promos API audience\n>Note that the audience has already been set to **api://promos** for you in `ice-resource-server/config.js`",
      "line": 4
    },
    {
      "title": "Register Custom Scopes",
      "description": "## Register Custom Scopes\n\n\n1.  Return to the Chrome browser where you left off in the Okta Admin\n    dashboard.\n\n2.  In the Promos API AuthZ Server page, select **Scopes**.\n\n3.  Add the following scopes:\n    - `promos:create`\n        - **Name**: promos:create\n        - **Display Phrase**: Create Promos\n        - **Description**: Create new promos via API\n        - **Default Scope, Metadata**: Unchecked\n    - `promos:read`\n        - **Name**: promos:read\n        - **Display Phrase**: Read Premium Promos\n        - **Description**: Read Premium promos via API\n        - **Default Scope, Metadata**: Unchecked\n    - `promos:delete`\n        - **Name**: promos:delete\n        - **Display Phrase**: Delete Premium Promos\n        - **Description**: Delete promos via API\n        - **Default Scope, Metadata**: Unchecked\n\n4.  After adding the above scopes, they should be listed in the scopes table:\n  ![](https://raw.githubusercontent.com/OktaEdu/es-delivery-apiam/refs/heads/ondemand/media/image10.png)"
    },
    {
      "title": "Register an Access Policy and Rule",
      "description": "## Register an Access Policy and Rule\n\n**Note:** The API Access Management access policies and rules control who can request\ntokens in the Authorization Server. This includes:\n\n- Which applications can request tokens.\n\n- Which OAuth flows are supported for requesting the token.\n\n- Which scopes, tokens, and claims will be granted by the Authorization\n  Server.\n\nIn this lab, you’ll configure an access policy with rules, so the\nAuthorization Server will issue tokens with custom scopes for the Promos\nUI app.\n\n1.  From the Promos API AuthZ Server page, click **Access Policies**.\n\n2.  Click **Add Policy**.\n\n3.  Enter the information as follows:\n    - **Name**: Promos Access Policy                   \n    - **Description**: Policy for accessing Promos APIs       \n    - **Assign to**: The following clients: Okta Ice Promos \n\n4.  Click **Create Policy**.\n\n5.  Click **Add Rule**.\n\n6.  Enter the information as follows:\n    - **Rule Name**: Read-only Promos API\n    - **IF Grant type is**: Select only **Authentication Code**\n    - **AND Scopes requested**: Select **The following scopes:** Then type in and select these scopes\n        - openid, email, profile, promos:read\n\n7.  Click **Create Rule**.\n\n>  Only apps assigned to this Access Policy can request both the standard scopes and the custom scope **promos:read** from our custom Authorization Server.\n"
    },
    {
      "title": "Lab checkpoint",
      "description": "## ✅ Checkpoint\nAt this point, you configured Okta API Access Management to support the\nPromos API with a custom authorization server. In the next lab, you will update the Promos API code to\nrequire custom scopes to access certain endpoints."
    }
  ],
  "isPrimary": true
}
